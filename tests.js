var Pack = require("./");
var test = require("tap").test;

function $(t, data, ref, dict) {
	var serialized = Pack.encode(data, dict);
	t.equivalent(serialized, new Buffer(ref));

	if (typeof data === "object") {
		t.deepEqual(Pack.decode(serialized, dict), data);
	} else {
		t.equals(Pack.decode(serialized, dict), data);
	}
}

test("should handle direct values", function(t) {
	$(t, null,  [0x01]);
	$(t, false, [0x11]);
	$(t, true,  [0x21]);
	t.end();
});

test("should handle integers", function(t) {
	$(t,       200, [0x02, 0xC8]);
	$(t,       -42, [0x42, 0xD6]);
	$(t,     40000, [0x12, 0x9C, 0x40]);
	$(t,     -4242, [0x52, 0xEF, 0x6E]);
	$(t,  42424242, [0x22, 0x02, 0x87, 0x57, 0xB2]);
	$(t, -42424242, [0x62, 0xFD, 0x78, 0xA8, 0x4E]);
	t.end();
});

test("should handle doubles", function(t) {
	$(t, 3.14, [0x13, 0x40, 0x09, 0x1E, 0xB8, 0x51, 0xEB, 0x85, 0x1F]);
	t.end();
});

test("should handle string", function(t) {
	$(t, "", [0x04, 0x00]);
	$(t, "Hello, world!", [0x04, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x21]);
	t.end();
});

test("should handle buffer", function(t) {
	$(t, new Buffer("Hello, world!", "utf8"), [0x05, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x21]);
	t.end();
});

test("should handle list", function(t) {
	$(t, [1, 2, 3], [0x06, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03]);
	$(t, [1, [2, 3]], [0x06, 0x02, 0x02, 0x01, 0x06, 0x02, 0x02, 0x02, 0x02, 0x03]);
	t.end();
});

test("should handle struct", function(t) {
	$(t, { a: 1, b: 2, c: 3 }, [0x07, 0x03, 0x04, 0x01, 0x61, 0x02, 0x01, 0x04, 0x01, 0x62, 0x02, 0x02, 0x04, 0x01, 0x63, 0x02, 0x03]);
	$(t, { a: { b: { c: 1 } } }, [0x07, 0x01, 0x04, 0x01, 0x61, 0x07, 0x01, 0x04, 0x01, 0x62, 0x07, 0x01, 0x04, 0x01, 0x63, 0x02, 0x01]);
	t.end();
});

test("should handle circular references", function(t) {
	var a = {}
	var b = [a]
	a.b = b;

	var serialized = Pack.encode(a);
	t.equivalent(serialized, new Buffer([0x07, 0x01, 0x04, 0x01, 0x62, 0x06, 0x01, 0x0A, 0x00]));

	var deserialized = Pack.decode(serialized);
	t.equals(deserialized, deserialized.b[0]);
	t.equals(deserialized.b, deserialized.b[0].b);

	t.end();
});

test("should handle string deduplication", function(t) {
	$(t, ["foo", "foo"], [0x06, 0x02, 0x04, 0x03, 0x66, 0x6F, 0x6F, 0x08, 0x00]);
	$(t, { a : "foo", b: "foo" }, [0x07, 0x02, 0x04, 0x01, 0x61, 0x04, 0x03, 0x66, 0x6F, 0x6F, 0x04, 0x01, 0x62, 0x08, 0x01]);
	$(t, [{ a: "foo"}, { a: "foo" }], [0x06, 0x02, 0x07, 0x01, 0x04, 0x01, 0x61, 0x04, 0x03, 0x66, 0x6F, 0x6F, 0x07, 0x01, 0x08, 0x00, 0x08, 0x01]);
	t.end();
});

test("should use dictionnary", function(t) {
	var dict = ["foo", "bar", 42];
	$(t, ["foo", { bar: 42 }], [0x06, 0x02, 0x80, 0x07, 0x01, 0x81, 0x82], dict);
	$(t, ["foo", { bar: 42 }], [0x06, 0x02, 0x04, 0x03, 0x66, 0x6F, 0x6F, 0x07, 0x01, 0x04, 0x03, 0x62, 0x61, 0x72, 0x02, 0x2A]);
	t.end();
});
